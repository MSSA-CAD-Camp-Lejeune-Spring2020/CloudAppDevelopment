# This workflow will build and push a .NET Core application to an Azure Web App on every push to the master branch.
#
# To configure this workflow:
#
# 1. Set up a secret in your repository named AZURE_WEBAPP_PUBLISH_PROFILE with the value of your Azure publish profile.
#    Get the publish profile from the portal: https://docs.microsoft.com/visualstudio/deployment/tutorial-import-publish-settings-azure?view=vs-2019#create-the-publish-settings-file-in-azure-app-service
#
# 2. Change the values for the AZURE_WEBAPP_NAME, AZURE_WEBAPP_PACKAGE_PATH and NETCORE_VERSION environment variables  (below).
#
# For more information on GitHub Actions for Azure, refer to https://github.com/Azure/Actions
# For more samples to get started with GitHub Action workflows to deploy to Azure, refer to https://github.com/Azure/actions-workflow-samples
name: "Build and Deploy"

on:
  push:
    branches:
      - master

env:
  AZURE_WEBAPP_NAME: lejeuneweb  # set this to your application's name
  AZURE_WEBAPP_PACKAGE_PATH: './published'      # set this to the path to your web app project, defaults to the repository root
  NETCORE_VERSION: '3.1.101'                    # set this to the .NET Core version to use

jobs:
  build:
    name: Build Web App
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    
    - name: Setup .NET Core SDK ${{ env.NETCORE_VERSION }}
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: ${{ env.NETCORE_VERSION }}
    
    - name: Restore packages
      run: dotnet restore

    - name: Build app
      run: dotnet build --configuration Release --no-restore

    # - name: Test app
    #   run: dotnet test --no-build

    - name: Publish app for deploy
      run: dotnet publish --configuration Release --no-build --output ${{ env.AZURE_WEBAPP_PACKAGE_PATH }}

    - name: Publish Artifacts
      uses: actions/upload-artifact@v1.0.0
      with:
        name: webapp
        path: ${{ env.AZURE_WEBAPP_PACKAGE_PATH }}

  create:
    name: Update Infrastructure
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2

    - name: 'Terraform Init'
      uses: hashicorp/terraform-github-actions@master
      with:
         tf_actions_version: 0.12.13
         tf_actions_subcommand: 'init'
         tf_actions_working_dir: './terraform'
         tf_actions_comment: false
         args: '-backend-config="key=${{ secrets.backend_key }}" -var-file="./terraform/variables.tfvars"'
      env:
       TF_VAR_subscription_id: ${{ secrets.ARM_SUBSCRIPTION_ID }}
       TF_VAR_backend_key: ${{ secrets.backend_key }}
       ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}
       ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
       ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
       ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}

    - name: 'Terraform Validate'
      uses: hashicorp/terraform-github-actions@master
      with:
         tf_actions_version: 0.12.13
         tf_actions_subcommand: 'validate'
         tf_actions_working_dir: './terraform'
         tf_actions_comment: false
         args: '-backend-config="key=${{ secrets.backend_key }}" -var-file="./terraform/variables.tfvars"'
      env:
       TF_VAR_subscription_id: ${{ secrets.ARM_SUBSCRIPTION_ID }}
       TF_VAR_backend_key: ${{ secrets.backend_key }}
       ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}
       ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
       ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
       ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}

    - name: 'Terraform Plan'
      uses: hashicorp/terraform-github-actions@master
      with:
         tf_actions_version: 0.12.13
         tf_actions_subcommand: 'plan'
         tf_actions_working_dir: './terraform'
         tf_actions_comment: false
         args: '-backend-config="key=${{ secrets.backend_key }}" -var-file="./terraform/variables.tfvars"'
      env:
       TF_VAR_subscription_id: ${{ secrets.ARM_SUBSCRIPTION_ID }}
       TF_VAR_backend_key: ${{ secrets.backend_key }}
       ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}
       ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
       ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
       ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}

    # - name: 'Terraform Apply'
    #   uses: hashicorp/terraform-github-actions@master
    #   with:
    #      tf_actions_version: 0.12.13
    #      tf_actions_subcommand: 'apply'
    #      tf_actions_working_dir: '.'
    #      tf_actions_comment: false
    #      args: '-var-file="terraform/variables.tfvars"'
    #   env:
    #    TF_VAR_subscription_id: ${{ secrets.ARM_SUBSCRIPTION_ID }}
    #    TF_VAR_backend_key: ${{ secrets.backend_key }}
    #    ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}
    #    ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
    #    ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
    #    ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}

  deploy:
    name: Deploy Web App
    runs-on: ubuntu-latest
    needs: [build, create]
    steps:
    - uses: actions/checkout@v2
    
    #- name: 'Deploy to Azure WebApp'
    #  uses: azure/webapps-deploy@v1
    #  with:
    #    app-name: ${{ env.AZURE_WEBAPP_NAME }}
    #    publish-profile: ${{ secrets.AZURE_WEBAPP_PUBLISH_PROFILE }}
    #    package: ${{ env.AZURE_WEBAPP_PACKAGE_PATH }}

